swagger: '2.0'
info:
  version: 1.0.0
  title: ongbook-api
basePath: /api
paths:
  '/demands/{id}/seeker':
    get:
      tags:
        - Demand
      summary: Fetches belongsTo relation seeker.
      operationId: Demand.prototype.__get__seeker
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: Demand id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Thing'
      deprecated: false
  /demands:
    post:
      tags:
        - Demand
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Demand.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Demand'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Demand'
      deprecated: false
    patch:
      tags:
        - Demand
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Demand.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Demand'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Demand'
      deprecated: false
    put:
      tags:
        - Demand
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Demand.replaceOrCreate__put_demands
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Demand'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Demand'
      deprecated: false
    get:
      tags:
        - Demand
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Demand.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Demand'
      deprecated: false
  /demands/replaceOrCreate:
    post:
      tags:
        - Demand
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Demand.replaceOrCreate__post_demands_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Demand'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Demand'
      deprecated: false
  /demands/upsertWithWhere:
    post:
      tags:
        - Demand
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Demand.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Demand'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Demand'
      deprecated: false
  '/demands/{id}/exists':
    get:
      tags:
        - Demand
      summary: Check whether a model instance exists in the data source.
      operationId: 'Demand.exists__get_demands_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/demands/{id}':
    head:
      tags:
        - Demand
      summary: Check whether a model instance exists in the data source.
      operationId: 'Demand.exists__head_demands_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Demand
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Demand.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Demand'
      deprecated: false
    put:
      tags:
        - Demand
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Demand.replaceById__put_demands_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Demand'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Demand'
      deprecated: false
    delete:
      tags:
        - Demand
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Demand.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Demand
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Demand.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Demand'
        - name: id
          in: path
          description: Demand id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Demand'
      deprecated: false
  '/demands/{id}/replace':
    post:
      tags:
        - Demand
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Demand.replaceById__post_demands_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Demand'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Demand'
      deprecated: false
  /demands/findOne:
    get:
      tags:
        - Demand
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Demand.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Demand'
      deprecated: false
  /demands/update:
    post:
      tags:
        - Demand
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Demand.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Demand'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /demands/count:
    get:
      tags:
        - Demand
      summary: Count instances of the model matched by where from the data source.
      operationId: Demand.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /demands/change-stream:
    post:
      tags:
        - Demand
      summary: Create a change stream.
      operationId: Demand.createChangeStream__post_demands_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Demand
      summary: Create a change stream.
      operationId: Demand.createChangeStream__get_demands_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/ngos/{id}/demands/{fk}':
    get:
      tags:
        - NGO
      summary: Find a related item by id for demands.
      operationId: NGO.prototype.__findById__demands
      parameters:
        - name: fk
          in: path
          description: Foreign key for demands
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: NGO id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Demand'
      deprecated: false
    delete:
      tags:
        - NGO
      summary: Delete a related item by id for demands.
      operationId: NGO.prototype.__destroyById__demands
      parameters:
        - name: fk
          in: path
          description: Foreign key for demands
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: NGO id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - NGO
      summary: Update a related item by id for demands.
      operationId: NGO.prototype.__updateById__demands
      parameters:
        - name: fk
          in: path
          description: Foreign key for demands
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Demand'
        - name: id
          in: path
          description: NGO id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Demand'
      deprecated: false
  '/ngos/{id}/demands/rel/{fk}':
    put:
      tags:
        - NGO
      summary: Add a related item by id for demands.
      operationId: NGO.prototype.__link__demands
      parameters:
        - name: fk
          in: path
          description: Foreign key for demands
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/NGODemand'
        - name: id
          in: path
          description: NGO id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/NGODemand'
      deprecated: false
    delete:
      tags:
        - NGO
      summary: Remove the demands relation to an item by id.
      operationId: NGO.prototype.__unlink__demands
      parameters:
        - name: fk
          in: path
          description: Foreign key for demands
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: NGO id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    head:
      tags:
        - NGO
      summary: Check the existence of demands relation to an item by id.
      operationId: NGO.prototype.__exists__demands
      parameters:
        - name: fk
          in: path
          description: Foreign key for demands
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: NGO id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: boolean
      deprecated: false
  '/ngos/{id}/demands':
    get:
      tags:
        - NGO
      summary: Queries demands of NGO.
      operationId: NGO.prototype.__get__demands
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: NGO id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Demand'
      deprecated: false
    post:
      tags:
        - NGO
      summary: Creates a new instance in demands of this model.
      operationId: NGO.prototype.__create__demands
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Demand'
        - name: id
          in: path
          description: NGO id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Demand'
      deprecated: false
    delete:
      tags:
        - NGO
      summary: Deletes all demands of this model.
      operationId: NGO.prototype.__delete__demands
      parameters:
        - name: id
          in: path
          description: NGO id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/ngos/{id}/demands/count':
    get:
      tags:
        - NGO
      summary: Counts demands of NGO.
      operationId: NGO.prototype.__count__demands
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: NGO id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /ngos:
    post:
      tags:
        - NGO
      summary: Create a new instance of the model and persist it into the data source.
      operationId: NGO.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/NGO'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/NGO'
      deprecated: false
    patch:
      tags:
        - NGO
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: NGO.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/NGO'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/NGO'
      deprecated: false
    put:
      tags:
        - NGO
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: NGO.replaceOrCreate__put_ngos
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/NGO'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/NGO'
      deprecated: false
    get:
      tags:
        - NGO
      summary: Find all instances of the model matched by filter from the data source.
      operationId: NGO.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/NGO'
      deprecated: false
  /ngos/replaceOrCreate:
    post:
      tags:
        - NGO
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: NGO.replaceOrCreate__post_ngos_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/NGO'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/NGO'
      deprecated: false
  /ngos/upsertWithWhere:
    post:
      tags:
        - NGO
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: NGO.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/NGO'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/NGO'
      deprecated: false
  '/ngos/{id}/exists':
    get:
      tags:
        - NGO
      summary: Check whether a model instance exists in the data source.
      operationId: 'NGO.exists__get_ngos_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/ngos/{id}':
    head:
      tags:
        - NGO
      summary: Check whether a model instance exists in the data source.
      operationId: 'NGO.exists__head_ngos_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - NGO
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: NGO.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/NGO'
      deprecated: false
    put:
      tags:
        - NGO
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'NGO.replaceById__put_ngos_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/NGO'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/NGO'
      deprecated: false
    delete:
      tags:
        - NGO
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: NGO.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - NGO
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: NGO.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/NGO'
        - name: id
          in: path
          description: NGO id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/NGO'
      deprecated: false
  '/ngos/{id}/replace':
    post:
      tags:
        - NGO
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'NGO.replaceById__post_ngos_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/NGO'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/NGO'
      deprecated: false
  /ngos/findOne:
    get:
      tags:
        - NGO
      summary: Find first instance of the model matched by filter from the data source.
      operationId: NGO.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/NGO'
      deprecated: false
  /ngos/update:
    post:
      tags:
        - NGO
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: NGO.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/NGO'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /ngos/count:
    get:
      tags:
        - NGO
      summary: Count instances of the model matched by where from the data source.
      operationId: NGO.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /ngos/change-stream:
    post:
      tags:
        - NGO
      summary: Create a change stream.
      operationId: NGO.createChangeStream__post_ngos_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - NGO
      summary: Create a change stream.
      operationId: NGO.createChangeStream__get_ngos_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/people/{id}/accessTokens/{fk}':
    get:
      tags:
        - Person
      summary: Find a related item by id for accessTokens.
      operationId: Person.prototype.__findById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Person id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - Person
      summary: Delete a related item by id for accessTokens.
      operationId: Person.prototype.__destroyById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Person id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Person
      summary: Update a related item by id for accessTokens.
      operationId: Person.prototype.__updateById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: Person id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  '/people/{id}/ngos/{fk}':
    get:
      tags:
        - Person
      summary: Find a related item by id for ngos.
      operationId: Person.prototype.__findById__ngos
      parameters:
        - name: fk
          in: path
          description: Foreign key for ngos
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Person id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/NGO'
      deprecated: false
    delete:
      tags:
        - Person
      summary: Delete a related item by id for ngos.
      operationId: Person.prototype.__destroyById__ngos
      parameters:
        - name: fk
          in: path
          description: Foreign key for ngos
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Person id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Person
      summary: Update a related item by id for ngos.
      operationId: Person.prototype.__updateById__ngos
      parameters:
        - name: fk
          in: path
          description: Foreign key for ngos
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/NGO'
        - name: id
          in: path
          description: Person id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/NGO'
      deprecated: false
  '/people/{id}/accessTokens':
    get:
      tags:
        - Person
      summary: Queries accessTokens of Person.
      operationId: Person.prototype.__get__accessTokens
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Person id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
      deprecated: false
    post:
      tags:
        - Person
      summary: Creates a new instance in accessTokens of this model.
      operationId: Person.prototype.__create__accessTokens
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: Person id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - Person
      summary: Deletes all accessTokens of this model.
      operationId: Person.prototype.__delete__accessTokens
      parameters:
        - name: id
          in: path
          description: Person id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/people/{id}/accessTokens/count':
    get:
      tags:
        - Person
      summary: Counts accessTokens of Person.
      operationId: Person.prototype.__count__accessTokens
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Person id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/people/{id}/ngos':
    get:
      tags:
        - Person
      summary: Queries ngos of Person.
      operationId: Person.prototype.__get__ngos
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Person id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/NGO'
      deprecated: false
    post:
      tags:
        - Person
      summary: Creates a new instance in ngos of this model.
      operationId: Person.prototype.__create__ngos
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/NGO'
        - name: id
          in: path
          description: Person id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/NGO'
      deprecated: false
    delete:
      tags:
        - Person
      summary: Deletes all ngos of this model.
      operationId: Person.prototype.__delete__ngos
      parameters:
        - name: id
          in: path
          description: Person id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/people/{id}/ngos/count':
    get:
      tags:
        - Person
      summary: Counts ngos of Person.
      operationId: Person.prototype.__count__ngos
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Person id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /people:
    post:
      tags:
        - Person
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Person.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Person'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Person'
      deprecated: false
    patch:
      tags:
        - Person
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Person.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Person'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Person'
      deprecated: false
    put:
      tags:
        - Person
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Person.replaceOrCreate__put_people
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Person'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Person'
      deprecated: false
    get:
      tags:
        - Person
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Person.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Person'
      deprecated: false
  /people/replaceOrCreate:
    post:
      tags:
        - Person
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Person.replaceOrCreate__post_people_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Person'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Person'
      deprecated: false
  /people/upsertWithWhere:
    post:
      tags:
        - Person
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Person.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Person'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Person'
      deprecated: false
  '/people/{id}/exists':
    get:
      tags:
        - Person
      summary: Check whether a model instance exists in the data source.
      operationId: 'Person.exists__get_people_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/people/{id}':
    head:
      tags:
        - Person
      summary: Check whether a model instance exists in the data source.
      operationId: 'Person.exists__head_people_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Person
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Person.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Person'
      deprecated: false
    put:
      tags:
        - Person
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Person.replaceById__put_people_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Person'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Person'
      deprecated: false
    delete:
      tags:
        - Person
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Person.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Person
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Person.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Person'
        - name: id
          in: path
          description: Person id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Person'
      deprecated: false
  '/people/{id}/replace':
    post:
      tags:
        - Person
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Person.replaceById__post_people_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Person'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Person'
      deprecated: false
  /people/findOne:
    get:
      tags:
        - Person
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Person.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Person'
      deprecated: false
  /people/update:
    post:
      tags:
        - Person
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Person.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Person'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /people/count:
    get:
      tags:
        - Person
      summary: Count instances of the model matched by where from the data source.
      operationId: Person.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /people/change-stream:
    post:
      tags:
        - Person
      summary: Create a change stream.
      operationId: Person.createChangeStream__post_people_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Person
      summary: Create a change stream.
      operationId: Person.createChangeStream__get_people_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /people/login:
    post:
      tags:
        - Person
      summary: Login a user with username/email and password.
      operationId: Person.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: >-
            Related objects to include in the response. See the description of
            return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created
              on login.

              Depending on the value of `include` parameter, the body may
              contain additional properties:

                - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)

            type: object
      deprecated: false
  /people/logout:
    post:
      tags:
        - Person
      summary: Logout a user with access token.
      operationId: Person.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/people/{id}/verify':
    post:
      tags:
        - Person
      summary: Trigger user's identity verification with configured verifyOptions
      operationId: Person.prototype.verify
      parameters:
        - name: id
          in: path
          description: Person id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /people/confirm:
    get:
      tags:
        - Person
      summary: Confirm a user registration with identity verification token.
      operationId: Person.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /people/reset:
    post:
      tags:
        - Person
      summary: Reset password for a user with email.
      operationId: Person.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /people/change-password:
    post:
      tags:
        - Person
      summary: Change a user's password.
      operationId: Person.changePassword
      parameters:
        - name: oldPassword
          in: formData
          required: true
          type: string
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /people/reset-password:
    post:
      tags:
        - Person
      summary: Reset user's password via a password-reset token.
      operationId: Person.setPassword
      parameters:
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
tags:
  - name: Demand
  - name: NGO
  - name: Person
consumes:
  - application/json
  - application/x-www-form-urlencoded
  - application/xml
  - text/xml
produces:
  - application/json
  - application/xml
  - text/xml
  - application/javascript
  - text/javascript
definitions:
  x-any:
    properties: {}
  Thing:
    properties:
      additionalType:
        type: string
      alternateName:
        type: string
      description:
        type: string
      disambiguatingDescription:
        type: string
      image:
        type: string
      mainEntityOfPage:
        type: string
      name:
        type: string
      potentialAction:
        type: object
      url:
        type: string
      address:
        type: object
      aggregateRating:
        type: object
      alumni:
        type: object
      areaServed:
        type: object
      award:
        type: string
      brand:
        type: object
      contactPoint:
        type: object
      department:
        type: object
      dissolutionDate:
        type: object
      duns:
        type: string
      email:
        type: string
      employee:
        type: object
      events:
        type: array
        items:
          type: object
      faxNumber:
        type: string
      founder:
        type: object
      foundingDate:
        type: string
        format: date-time
      foundingLocation:
        type: object
      funder:
        type: object
      globalLocationNumber:
        type: string
      hasOfferCatalog:
        type: object
      hasPOS:
        type: object
      isicV4:
        type: string
      legalName:
        type: string
      leiCode:
        type: string
      location:
        type: object
      logo:
        type: string
      makesOffer:
        type: array
        items:
          type: object
      member:
        type: array
        items:
          type: object
      memberOf:
        type: object
      naics:
        type: string
      numberOfEmployees:
        type: number
        format: double
      owns:
        type: object
      parentOrganization:
        type: object
      review:
        type: object
      seeks:
        type: object
      sponsor:
        type: object
      subOrganization:
        type: object
      taxID:
        type: string
      telephone:
        type: string
      vatID:
        type: string
      complete:
        default: false
        type: boolean
      id:
        type: number
        format: double
    additionalProperties: false
  Demand:
    properties:
      additionalType:
        type: string
      alternateName:
        type: string
      description:
        type: string
      disambiguatingDescription:
        type: string
      image:
        type: string
      mainEntityOfPage:
        type: string
      name:
        type: string
      potentialAction:
        type: object
      url:
        type: string
      acceptedPaymentMethod:
        type: object
      advanceBookingRequirement:
        type: object
      areaServed:
        type: object
      availability:
        type: object
      availabilityEnds:
        type: string
        format: date-time
      availabilityStarts:
        type: string
        format: date-time
      availableAtOrFrom:
        type: string
        format: date-time
      availableDeliveryMethod:
        type: object
      businessFunction:
        type: object
      deliveryLeadTime:
        type: object
      eligibleCustomerType:
        type: object
      eligibleDuration:
        type: object
      eligibleQuantity:
        type: object
      eligibleRegion:
        type: object
      eligibleTransactionVolume:
        type: object
      gtin12:
        type: string
      gtin13:
        type: string
      gtin14:
        type: string
      gtin8:
        type: string
      includesjson:
        type: object
      ineligibleRegion:
        type: object
      inventoryLevel:
        type: object
      itemCondition:
        type: object
      itemOffered:
        type: object
      mpn:
        type: object
      priceSpecification:
        type: object
      seller:
        type: object
      serialNumber:
        type: string
      sku:
        type: string
      validFrom:
        type: string
        format: date-time
      validThrough:
        type: string
        format: date-time
      warranty:
        type: object
      role:
        type: array
        items:
          $ref: '#/definitions/x-any'
      id:
        type: number
        format: double
      seeker_id:
        type: number
        format: double
    additionalProperties: false
  NGODemand:
    properties:
      id:
        type: number
        format: double
      nGOId:
        type: number
        format: double
      demandId:
        type: number
        format: double
    additionalProperties: false
  NGO:
    properties:
      name:
        type: string
      additionalType:
        type: string
      alternateName:
        type: string
      description:
        type: string
      disambiguatingDescription:
        type: string
      image:
        type: string
      mainEntityOfPage:
        type: string
      potentialAction:
        type: object
      url:
        type: string
      address:
        type: object
      aggregateRating:
        type: object
      alumni:
        type: object
      areaServed:
        type: object
      award:
        type: string
      brand:
        type: object
      contactPoint:
        type: object
      department:
        type: object
      dissolutionDate:
        type: object
      duns:
        type: string
      email:
        type: string
      employee:
        type: object
      events:
        type: array
        items:
          type: object
      faxNumber:
        type: string
      founder:
        type: object
      foundingDate:
        type: string
        format: date-time
      foundingLocation:
        type: object
      funder:
        type: object
      globalLocationNumber:
        type: string
      hasOfferCatalog:
        type: object
      hasPOS:
        type: object
      isicV4:
        type: string
      legalName:
        type: string
      leiCode:
        type: string
      location:
        type: object
      logo:
        type: string
      makesOffer:
        type: array
        items:
          type: object
      member:
        type: array
        items:
          type: object
      memberOf:
        type: object
      naics:
        type: string
      numberOfEmployees:
        type: number
        format: double
      owns:
        type: object
      parentOrganization:
        type: object
      review:
        type: object
      seeks:
        type: object
      sponsor:
        type: object
      subOrganization:
        type: object
      taxID:
        type: string
      telephone:
        type: string
      vatID:
        type: string
      complete:
        default: false
        type: boolean
      id:
        type: number
        format: double
      ngo_id:
        type: number
        format: double
    additionalProperties: false
  AccessToken:
    properties:
      id:
        type: string
      ttl:
        default: 1209600
        description: time to live in seconds (2 weeks by default)
        type: number
        format: double
      scopes:
        description: Array of scopes granted to this access token.
        type: array
        items:
          type: string
      created:
        type: string
        format: date-time
      userId:
        type: number
        format: double
    required:
      - id
    additionalProperties: false
  Person:
    properties:
      name:
        type: string
      realm:
        type: string
      username:
        type: string
      email:
        type: string
      emailVerified:
        type: boolean
      id:
        type: number
        format: double
    required:
      - name
      - email
    additionalProperties: false
